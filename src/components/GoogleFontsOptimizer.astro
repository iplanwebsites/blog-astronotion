---
//FROM https://github.com/sebholstein/astro-google-fonts-optimizer/blob/main/packages/astro-google-fonts-optimizer/GoogleFontsOptimizer.astro
export interface Props {
    url: string[] | string;
    preconnectUrl?: string;
}

const userAgents: { name: string; ua: string }[] = [
  // this must always be the first element here!
  {
    name: 'woff',
    ua: 'Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko',
  },
  // from: https://github.com/fontsource/google-font-metadata/blob/main/data/user-agents.json
  {
    name: 'woff2',
    ua: 'Mozilla/5.0 (Windows NT 6.3; rv:39.0) Gecko/20100101 Firefox/44.0"',
  },
];

async function downloadFontCSS(url: string): Promise<string> {
  const fontDownloads = Promise.all(
    userAgents.map((entry) => {
      return fetch(url, { headers: { 'User-Agent': entry.ua } })
        .then((res) => {
          if (!res.ok) {
            throw new Error(res.statusText);
          }
          return res.text();
        })
        .then((t) =>
          t.replace(/  +/g, '').replace(/\t+/g, '').replace(/\n+/g, '')
        );
    })
  );
  const contents = await fontDownloads;
return contents.join(' ');
}

const props = Astro.props as Props;
const urls = Array.isArray(props.url) ? props.url : [props.url];
const preconnect = props.preconnectUrl ?? 'https://fonts.gstatic.com';

const contents = await Promise.all(
    urls.map(async (url) => {
        try {
            const css = await downloadFontCSS(url);
            return { css }
        } catch (err) {
            return { url }
        }
    })
)
---

{contents.length > 0 && preconnect && (
  <link rel="preconnect" href={preconnect} crossorigin="anonymous" />
)}
{contents.map(content => {
    if (content.css) {
        return (
            <>
                <style set:html={content.css} is:inline>
                </style>
            </>
        )
    }

    return <link href={content.url} rel="stylesheet" />
})}
