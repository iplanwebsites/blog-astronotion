---
import { Icon } from "astro-iconify";
import { getTextToAstroIcon } from "@/lib/style-helpers";
import { SOCIALS } from "@/constants";
import type { SocialLink } from "@/types";
import Divider from "./notion-blocks/Divider.astro";

const mapSocialLinks = (socialLinksObject: { [key: string]: string }): SocialLink[] => {
	return Object.entries(socialLinksObject)
		.map(([key, value]): SocialLink => {
			// Handling special case for email
			let iconname = getTextToAstroIcon(key);
			iconname = iconname ? iconname : "mdi:web";
			if (key === "email") {
				return {
					name: iconname,
					friendlyName: key.charAt(0).toUpperCase() + key.slice(1), // Capitalize the first letter
					link: value.startsWith("mailto:") ? value : `mailto:${value}`,
					isWebmention: true,
				};
			}

			return {
				name: iconname,
				friendlyName: key.charAt(0).toUpperCase() + key.slice(1), // Capitalize the first letter
				link: value,
			};
		})
		.filter((link) => link.link && link.link!=="mailto:"); // Filter out empty links
};

const socialLinks = mapSocialLinks(SOCIALS);
---
{socialLinks && (
<div class="flex flex-wrap items-center gap-x-4 print:hidden">
	<p>Find me on</p>
	<ul class="flex flex-1 items-center gap-x-2 sm:flex-initial">
		{
			socialLinks.map(({ link, name, friendlyName, isWebmention }) => (
				<li class="flex">
					<a
						class="inline-block p-1 sm:hover:text-link"
						href={link}
						target="_blank"
						rel={`noopener noreferrer ${isWebmention ? "me authn" : ""}`}
					>
						<Icon class="h-6 w-6" name={name} aria-label={friendlyName} focusable="false" />
						<span class="sr-only">{friendlyName}</span>
					</a>
				</li>
			))
		}
	</ul>
</div>
<div class="screen:hidden w-full">
  <hr class="mb-4">
	<p class="text-left font-bold">Find me on:</p>
	<ul>
		{
			socialLinks.map(({ link, name, friendlyName, isWebmention }) => (
				<li class="flex">
						<p class="text-left">{friendlyName}: {link}</p>
				</li>
			))
		}
	</ul>
</div>
)}
