---
import type { Block, Post, ReferencesInPage } from '@/lib/interfaces';
import NBlocksPopover from './NBlocksPopover.astro';
import { getReferenceLink } from '@/lib/blog-helpers';
import { REFERENCES } from '@/constants';
interface Props {
	post: Post;
  filteredReferencesInPage: ReferencesInPage[];
}
const { post, filteredReferencesInPage } = Astro.props;

const groupedReferences: { [key: string]: {block:Block, dml:string}[] } =
filteredReferencesInPage.reduce((acc, ref) => {
    // Group by direct_nonmedia_link and collect Block objects
    if (ref.direct_media_link) {
      // const key = ref.direct_media_link;
      let key= null;
      key = ref.block.Video? "Videos":(ref.block.NImage?"Images":(ref.block.NAudio?"Audio":"Files"))
      acc[key] = acc[key] || [];
      acc[key].push({block:ref.block, dml:ref.direct_media_link});
    }
    return acc;
  }, {});

  const blockIdLinks = {};
  if (groupedReferences) {
  for (const dmltype of Object.keys(groupedReferences)) {
    for (const blockdml of groupedReferences[dmltype]) {
      const result = await getReferenceLink(post.PageId, undefined, blockdml.block, true);
      blockIdLinks[blockdml.block.Id] = result[0];
    }
  }
}

// console.log(groupedReferences);

---

{
  groupedReferences && Object.keys(groupedReferences).length > 0 && (
    <div>
      <span class="font-semibold">
        Media & Files On This Page
      </span>
      {Object.entries(groupedReferences).map(([dmltype, blockdmls]) => (
        <div class="ml-2" key={dmltype}>
          <div class="inline-block">
            {REFERENCES && REFERENCES["popovers"] ? (
              <>
                <span class="italic">{dmltype}</span> {' at '}
                {blockdmls.map((blockdml, index) => (
                  <>
                    <NBlocksPopover
                      block={blockdml.block}
                      linkedTo={blockIdLinks[blockdml.block.Id]}
                      popoverSpanText={`[${index + 1}]`}
                      font = {"font-mono"}
                    />
                    {' '}
                  </>
                ))}
              </>
            ) : (
              <>
              <span class="italic">{dmltype}</span> {' at '}
                {blockdmls.map((blockdml, index) => (
                  <a href={blockIdLinks[blockdml.block.Id]} class="text-link font-mono">
                    {`[${index + 1}]`}
                  </a>
                ))}
              </>
            )}
          </div>
        </div>
      ))}
    </div>
    <br>
  )
}

