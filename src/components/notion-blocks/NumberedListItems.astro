---
import * as interfaces from "../../lib/interfaces.ts";
import { getNotionColorToTailwindColor } from "../../lib/style-helpers.ts";
import RichText from "./RichText.astro";
import NotionBlocks from "../NotionBlocks.astro";

export interface Props {
	block: interfaces.Block;
	level: number;
	headings: interfaces.Block[];
  renderChildren?: boolean; // Make this optional
  setId?:boolean;
}

const { block, level, headings, renderChildren = true, setId=true   } = Astro.props;

const listTypes = ["lower-roman", "decimal", "lower-alpha"];
---

<div class="numbered-list" id={setId?block.Id:undefined}>
	<ol
		class="list-outside space-y-1 pl-6"
		style={`list-style-type: ${listTypes[level % 3]} !important;`}
	>
		{
			block.ListItems.filter((b: interfaces.Block) => b.Type === "numbered_list_item").map(
				(b: interfaces.Block) => (
					<li class={getNotionColorToTailwindColor(b.NumberedListItem.Color)} id={setId?b.Id:undefined}>
						{b.NumberedListItem.RichTexts.map((richText: interfaces.RichText) => (
							<RichText richText={richText} blockID={b.Id} />
						))}
						{b.HasChildren && renderChildren && (
							<NotionBlocks
								blocks={b.NumberedListItem.Children}
								level={level + 1}
								headings={headings}
                renderChildren={renderChildren} setId={setId}
							/>
						)}
					</li>
				),
			)
		}
	</ol>
</div>
