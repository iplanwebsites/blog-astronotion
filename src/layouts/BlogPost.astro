---
import BaseLayout from "./Base.astro";
import BlogHero from "@/components/blog/Hero";
import TOC from "@/components/blog/TOC";
import WebMentions from "@/components/blog/webmentions/index";

import type { Post } from "src/lib/interfaces";
import type { Heading } from "@/types";
import PostComments from "@/components/blog/PostComments";
import { BOTTOM_TOC, REFERENCES } from "@/constants";
import ReferencesSection from "@/components/blog/references/ReferencesSection.astro";
import BottomTOC from "@/components/blog/BottomTOC.astro";
import { Icon } from "astro-iconify";
import { getTextToAstroIcon } from "@/lib/style-helpers";

interface Props {
	post: Post;
	ogImage?: string;
	headings: Heading[];
}

const { post, ogImage, headings } = Astro.props;
REFERENCES
	? headings.push({
			text: "Interlinked Content",
			slug: "autogenerated-interlinked-content",
			depth: 1,
	  })
	: headings;

const socialImage = ogImage ? ogImage : `/og-image/${post.Slug}.png`;
const articleDate = new Date(post.Date).toISOString();
---

<!-- <BaseLayout meta={{ title, description, articleDate, ogImage: socialImage }}> -->
<BaseLayout
	meta={{ title: post.Title, description: post.Excerpt, articleDate, ogImage: socialImage }}
>
	<div class="sm:grid sm:grid-cols-4 sm:items-start sm:gap-x-10">
		<article class="screen:col-span-3 break-words print:col-span-full" data-pagefind-body>
			<div id="blog-hero"><BlogHero post={post} /></div>
			<!-- <div id="blog-hero"><BlogHero content={post} /></div> -->
			<div class="mt-8">
				<slot />
				<hr class="divider w-70 mx-auto my-4 h-0.5 rounded border-0 bg-accent/30" />
        {REFERENCES && <ReferencesSection post={post} />}

			</div>
		</article>
		{!!headings.length && <TOC headings={headings} />}
		{!!headings.length && BOTTOM_TOC && <BottomTOC headings={headings} />}
	</div>
  <div class="sm:grid sm:grid-cols-4 sm:items-start sm:gap-x-10 print:hidden">
		<aside class="col-span-3" data-pagefind-ignore="all">

  <WebMentions />

  <PostComments />
</aside>
  </div>
	<button
		id="to-top-btn"
		class={`z-30 fixed print:hidden ${
			BOTTOM_TOC ? "bottom-20" : "bottom-8"
		} sm:bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12`}
		aria-label="Back to Top"
		data-show="false"
		><svg
			xmlns="http://www.w3.org/2000/svg"
			aria-hidden="true"
			focusable="false"
			fill="none"
			viewBox="0 0 24 24"
			stroke-width="2"
			stroke="currentColor"
			class="h-6 w-6"
		>
			<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"></path>
		</svg>
	</button>
	{
		BOTTOM_TOC && (
			<button
				id="show-bottom-toc"
				class={`fixed bottom-8 end-4 z-30 flex h-10 w-10 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl transition-all duration-300 hover:border-zinc-400 dark:bg-zinc-700 sm:hidden print:hidden`}
				aria-label="Show table of contents"
			>
				<Icon class="h-6 w-6" name={getTextToAstroIcon("table-of-contents")} aria-hidden="true" />
			</button>
		)
	}
</BaseLayout>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const scrollBtn = document.getElementById("to-top-btn");
		const targetHeader = document.getElementById("blog-hero");
		const bottomTocNav = document.getElementById("bottom-toc-nav");
		const showBottomToc = document.getElementById("show-bottom-toc");

		function callback(entries) {
			entries.forEach((entry) => {
				if (entry.target === targetHeader) {
					scrollBtn.dataset.show = (!entry.isIntersecting).toString();
				}
			});
		}

		scrollBtn.addEventListener("click", () => {
			document.documentElement.scrollTo({ top: 0, behavior: "smooth" });
		});
		const observer = new IntersectionObserver(callback);
		observer.observe(targetHeader);

		if (bottomTocNav && showBottomToc) {
			showBottomToc.addEventListener("click", function () {
				const showBottomTocBtn = this;

				// Check if bottom-toc-nav is currently visible
				const isVisible = bottomTocNav.classList.contains("vopacity-100");

				// Toggle visibility
				if (isVisible) {
					// Hide bottom-toc-nav
					bottomTocNav.classList.remove("vopacity-100");
					bottomTocNav.classList.add("vopacity-0");

					// Reset positions of buttons
					scrollBtn.classList.remove("bottom-56");
					scrollBtn.classList.add("bottom-20");
					showBottomTocBtn.classList.remove("bottom-44");
					showBottomTocBtn.classList.add("bottom-8");
				} else {
					// Show bottom-toc-nav
					bottomTocNav.classList.remove("vopacity-0");
					bottomTocNav.classList.add("vopacity-100");

					// Shift positions of buttons
					scrollBtn.classList.remove("bottom-20");
					scrollBtn.classList.add("bottom-56");
					showBottomTocBtn.classList.remove("bottom-8");
					showBottomTocBtn.classList.add("bottom-44");

					// Set a timer to hide bottom-toc-nav after 3 seconds
					setTimeout(function () {
						bottomTocNav.classList.remove("vopacity-100");
						bottomTocNav.classList.add("vopacity-0");

						// Reset positions of buttons
						scrollBtn.classList.remove("bottom-56");
						scrollBtn.classList.add("bottom-20");
						showBottomTocBtn.classList.remove("bottom-44");
						showBottomTocBtn.classList.add("bottom-8");
					}, 3000);
				}
			});
		}
	});
</script>
